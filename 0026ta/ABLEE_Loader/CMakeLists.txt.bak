cmake_minimum_required(VERSION 3.18.0)

if ( NOT DEFINED ENV{ATOS_DIR} )
    message( FATAL_ERROR "Please set $ATOS_DIR system environment variable!!" )
endif()
#message("-- ATOS_DIR : " $ENV{ATOS_DIR})

project( "atloader" )
set( TARGET ${PROJECT_NAME} )
set( INSTALL_PATH $ENV{ATOS_DIR}/cpu )
set( LIB_PATH $ENV{ATOS_DIR}/lib )

#
# Qt5 support
#
# general overview:
#  * [Modern CMake with Qt and Boost](http://www.kdab.com/modern-cmake-with-qt-and-boost/)
#  * [Using CMake with Qt 5](http://www.kdab.com/using-cmake-with-qt-5/)

set( CMAKE_AUTOMOC ON )
set( CMAKE_INCLUDE_CURRENT_DIR ON )
set( CMAKE_CXX_STANDARD 17 )
set( CMAKE_CXX_STANDARD_REQUIRED ON )
set( CMAKE_CXX_EXTENSIONS ON )
set( CMAKE_VERBOSE_MAKEFILE OFF )
set( CMAKE_CXX_FLAGS_DEBUG "-g -fopenmp" )
set( CMAKE_CXX_FLAGS_RELEASE "-O2 -fopenmp" )

if( NOT CMAKE_BUILD_TYPE )
    set( CMAKE_BUILD_TYPE Release )
endif( NOT CMAKE_BUILD_TYPE )

#message( "IO INSTALL_PREFIX_DIR : " ${INSTALL_PREFIX_DIR} )
if( INSTALL_PREFIX_DIR )
    set( CMAKE_INSTALL_PREFIX ${INSTALL_PREFIX_DIR} )
else( INSTALL_PREFIX_DIR )
    set( CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR} )
endif( INSTALL_PREFIX_DIR )
#message( "IO CMAKE_INSTALL_PREFIX : " ${CMAKE_INSTALL_PREFIX} )


find_package(Qt5Core REQUIRED)
find_package(Qt5Network REQUIRED)

set(QT5_LIBRARIES Qt5::Core Qt5::Network )

set( SOURCES
        "src/main.cpp"
        "src/loader.cpp"
        "src/logger.cpp"
        "src/downloader.cpp"
        "../ABLEE_Common/src/tcpclient.cpp"
        "../ABLEE_Common/src/tcpserver.cpp"
        "../ABLEE_Common/src/localserver.cpp"
        "../ABLEE_Common/src/elementqueue.cpp"
        "../ABLEE_TestLib/src/util.cpp"
        "../ABLEE_TestLib/src/io.cpp"
)

FILE( GLOB_RECURSE HEADERS
    "include/downloader.hpp"
    "include/loader.hpp"
    "include/logger.hpp"
    "../ABLEE_Common/sys/protocol.hpp"
    "../ABLEE_Common/sys/sysdef.hpp"
    "../ABLEE_Common/sys/syslog.hpp"
    "../ABLEE_Common/sys/io.hpp"
    "../ABLEE_Common/tcp/commstruct.hpp"
    "../ABLEE_Common/tcp/elementqueue.hpp"
    "../ABLEE_Common/tcp/tcpclient.hpp"
    "../ABLEE_Common/tcp/tcpserver.hpp"
    "../ABLEE_Common/tcp/localserver.hpp"
    "../ABLEE_Common/tcp/ftplib.hpp"
    "../ABLEE_Common/tool/util.hpp"
    )

#include directory
include_directories( include src ../ABLEE_FtpLib ../ABLEE_TestLib/ ../ABLEE_Common/tcp ../ABLEE_Common/tool ../ABLEE_Common/sys )

#common library
link_directories( ${LIB_PATH} )
#link_libraries(testlib)

#compile, link option
add_compile_options( -Wall -Wextra -fPIC -fopenmp -Wno-unused-parameter )

# Generate necessary headers from .ui files. (qmake lets `uic` do this job.)
# hint from [Cross-platform Qt5 project using cmake](http://stackoverflow.com/questions/21174586/cross-platform-qt5-project-using-cmake)
#
#qt5_wrap_ui(UI_GENERATED_HEADERS ${UI_SOURCES})

#
# IMPORTANT: Adding generated headers to target as dependencies
# hint from [unable to include a ui_form header of QT5 in cmake](http://stackoverflow.com/questions/16245147/unable-to-include-a-ui-form-header-of-qt5-in-cmake)
#

add_executable( ${TARGET} ${SOURCES} ${HEADERS})

#
# `target_link_libraries()` rather than `qt5_use_modules()` for CMake 2.8.11 or later
# hint from [CMake & QT5 - QT5_WRAP_UI not generating ui header files](http://stackoverflow.com/questions/25875255/cmake-qt5-qt5-wrap-ui-not-generating-ui-header-files)
#
target_link_libraries(${TARGET} ${QT5_LIBRARIES})

install(TARGETS ${TARGET} CONFIGURATIONS Debug   DESTINATION ${CMAKE_INSTALL_PREFIX}/debug/cpu)
install(TARGETS ${TARGET} CONFIGURATIONS Release DESTINATION ${CMAKE_INSTALL_PREFIX}/release/cpu)

install(TARGETS ${TARGET} CONFIGURATIONS Debug   DESTINATION ${INSTALL_PATH} )
install(TARGETS ${TARGET} CONFIGURATIONS Release DESTINATION ${INSTALL_PATH} )
